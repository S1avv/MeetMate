from aiogram.filters import Command, CommandObject, CommandStart
from aiogram import Router, types, F
from aiogram.types import Message
from aiogram.types import InputMediaPhoto
from aiogram.types import FSInputFile

from tools.account_manager import verify_account
from tools.gpt_check import request_gpt
from handlers.profile import get_completed_profile
from keyboards import builder
from config import bot

import asyncio
import os
import aiosqlite

messages_type = Router()

@messages_type.message()
async def messages_cmd(message: Message):
    await verify_account(message)

    async with aiosqlite.connect("meetmate/database.sqlite") as db:
        cursor = await db.cursor()
        await cursor.execute(f"SELECT * FROM users WHERE id = {message.from_user.id}")
        users_data = await cursor.fetchone()

        await cursor.execute(f"SELECT * FROM profiles WHERE id = {message.from_user.id}")
        profile_data = await cursor.fetchone()

        if users_data[4] == 'description':
            verify = await request_gpt(f"Verify the text for the presence of offensive language: '{message.text}' If there is offensive language in this text, write True; if not, then False. Always provide the response in one word.")

            if "True" in verify:
                await message.delete()
                sent_message = await message.answer("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ–Ω –≤–∞—à–µ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è")
                
                await asyncio.sleep(4)
                
                await sent_message.delete()
                return 
            
            await cursor.execute("UPDATE profiles SET description = ? WHERE id = ?", (message.text, str(message.from_user.id)))
            await cursor.execute("UPDATE users SET input_type = ? WHERE id = ?", ("None", str(message.from_user.id)))

            caption = (
                f"üöÄ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username}\n\n"
                f"‚Ä¢ –ò–º—è: <b>{profile_data[1]}</b>\n\n"
                f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: <b>{message.text}</b>\n\n"
                f"‚Ä¢ –ü–æ–ª: <b>{profile_data[4]}</b>\n\n"
                f"‚Ä¢ –°—Ç—Ä–∞–Ω–∞: <b>{profile_data[5]}</b>\n\n"
                f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: <b>{profile_data[6]}</b>\n\n"
                f"‚Ä¢ –ù–µ–º–Ω–æ–≥–æ –æ —Ö–æ–±–±–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö: <b>{profile_data[7]}</b>\n\n"
                f"üìÇ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: <b>{"–ï—Å—Ç—å" if os.path.exists(os.path.join("avatars", str({message.from_user.id}))) else "–ù–µ—Ç—É"}</b>"
            )

            photo_path = f"meetmate/avatars/{message.from_user.id}.png" if os.path.join(f"meetmate/avatars", f"{message.from_user.id}.png") else "meetmate/assets/start.png"

            media = InputMediaPhoto(media=FSInputFile(photo_path), caption=caption)

            await bot.edit_message_media(media=media, chat_id=message.from_user.id, message_id=users_data[5], reply_markup=builder.profile.as_markup())

            await db.commit()

            await message.delete()

        elif users_data[4] == 'country':
            verify = await request_gpt(f"Here's the text sent by the user: '{message.text}', extract the country from this text and provide a one-word response in the following format: 'Flag emoji of the Country'. If there is no country in the text, simply output 'False'. Make sure to output in this format: 'Flag of the country you found, and then the country itself")

            if "False" in verify:
                await message.delete()

                sent_message = await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –µ—â–µ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

                await asyncio.sleep(4)
                
                await sent_message.delete()
                return 
            

            await cursor.execute("UPDATE profiles SET country = ? WHERE id = ?", (verify, str(message.from_user.id)))
            await cursor.execute("UPDATE users SET input_type = ? WHERE id = ?", ("None", str(message.from_user.id)))

            await db.commit()

            caption = (
                f"üöÄ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username}\n\n"
                f"‚Ä¢ –ò–º—è: <b>{profile_data[1]}</b>\n\n"
                f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: <b>{profile_data[2]}</b>\n\n"
                f"‚Ä¢ –ü–æ–ª: <b>{profile_data[4]}</b>\n\n"
                f"‚Ä¢ –°—Ç—Ä–∞–Ω–∞: <b>{verify}</b>\n\n"
                f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: <b>{profile_data[6]}</b>\n\n"
                f"‚Ä¢ –ù–µ–º–Ω–æ–≥–æ –æ —Ö–æ–±–±–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö: <b>{profile_data[7]}</b>\n\n"
                f"üìÇ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: <b>{"–ï—Å—Ç—å" if os.path.exists(os.path.join("avatars", str({message.from_user.id}))) else "–ù–µ—Ç—É"}</b>"
            )

            photo_path = f"meetmate/avatars/{message.from_user.id}.png" if os.path.join(f"meetmate/avatars", f"{message.from_user.id}.png") else "meetmate/assets/start.png"

            media = InputMediaPhoto(media=FSInputFile(photo_path), caption=caption)

            await bot.edit_message_media(media=media, chat_id=message.from_user.id, message_id=users_data[5], reply_markup=builder.profile.as_markup())


            await message.delete()
        else:
            await message.delete()